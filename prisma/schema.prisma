generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("VIEWER")
  department    String?
  status        String    @default("ACTIVE")
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  createdOrders       Order[]              @relation("OrderCreatedBy")
  updatedOrders       Order[]              @relation("OrderUpdatedBy")
  stockMovements      StockMovement[]
  auditLogs           AuditLog[]

  @@map("users")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String   @unique
  category    String
  brand       String?
  unitPrice   Float
  weight      Float?
  dimension   String?
  barcode     String?  @unique
  minStock    Int      @default(0)
  maxStock    Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  inventories    Inventory[]
  orderItems     OrderItem[]
  stockMovements StockMovement[]

  @@map("products")
}

model Warehouse {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  address   String
  city      String
  country   String   @default("Ethiopia")
  manager   String?
  phone     String?
  email     String?
  capacity  Int?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventory      Inventory[]
  orders         Order[]
  stockMovements StockMovement[]

  @@map("warehouses")
}

model Inventory {
  id          String   @id @default(cuid())
  productId   String
  warehouseId String
  quantity    Int      @default(0)
  reservedQty Int      @default(0)
  location    String?
  lastUpdated DateTime @default(now())

  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([productId, warehouseId])
  @@map("inventory")
}

model Supplier {
  id            String   @id @default(cuid())
  name          String
  code          String   @unique
  email         String?
  phone         String?
  address       String?
  city          String?
  country       String   @default("Ethiopia")
  contactPerson String?
  paymentTerms  String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  orders Order[]

  @@map("suppliers")
}

model Order {
  id           String    @id @default(cuid())
  orderNumber  String    @unique
  type         String
  status       String    @default("PENDING")
  supplierId   String?
  warehouseId  String
  totalAmount  Float
  reason       String?
  notes        String?
  orderDate    DateTime  @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  createdById  String
  updatedById  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  supplier   Supplier?   @relation(fields: [supplierId], references: [id])
  warehouse  Warehouse   @relation(fields: [warehouseId], references: [id])
  createdBy  User        @relation("OrderCreatedBy", fields: [createdById], references: [id])
  updatedBy  User?       @relation("OrderUpdatedBy", fields: [updatedById], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model StockMovement {
  id          String   @id @default(cuid())
  productId   String
  warehouseId String
  type        String
  quantity    Int
  reference   String?
  notes       String?
  userId      String
  createdAt   DateTime @default(now())

  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String
  oldValues String?
  newValues String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
